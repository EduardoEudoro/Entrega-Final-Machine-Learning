import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt

(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

x_train = x_train.astype("float32") / 255.0
x_test = x_test.astype("float32") / 255.0
x_train = x_train[..., tf.newaxis]
x_test = x_test[..., tf.newaxis]

model1 = models.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    layers.MaxPooling2D((2,2)),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

model2 = models.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Dropout(0.25),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(10, activation='softmax')
])

for model in [model1, model2]:
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

history1 = model1.fit(x_train, y_train, epochs=5, validation_split=0.1, verbose=1)
history2 = model2.fit(x_train, y_train, epochs=5, validation_split=0.1, verbose=1)

test_loss1, test_acc1 = model1.evaluate(x_test, y_test, verbose=0)
test_loss2, test_acc2 = model2.evaluate(x_test, y_test, verbose=0)

print(f"Modelo 1 - CNN Simples: Acurácia de teste = {test_acc1:.4f}")
print(f"Modelo 2 - CNN Profunda: Acurácia de teste = {test_acc2:.4f}")

def plot_history(h1, h2, title):
    plt.figure(figsize=(8,4))
    plt.plot(h1.history['val_accuracy'], label='CNN Simples')
    plt.plot(h2.history['val_accuracy'], label='CNN Profunda')
    plt.title(title)
    plt.xlabel('Época')
    plt.ylabel('Acurácia de Validação')
    plt.legend()
    plt.show()

plot_history(history1, history2, "Comparação de Acurácia")
